{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useState, useEffect, useRef } from \"react\";\nimport API from \"../API\";\nconst initialState = {\n  page: 0,\n  results: [],\n  total_pages: 0,\n  total_results: 0\n};\nexport const useHomeFetch = () => {\n  _s();\n\n  const [state, setState] = useState(initialState);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(false);\n\n  const fetchMovies = async (page, searchTerm = \"\") => {\n    try {\n      setError(false);\n      setLoading(true);\n      const movies = await API.fetchMovies(searchTerm, page);\n      setState(prev => ({ ...movies,\n        results: page > 1 ? [...prev.results, ...movies.results] : [...movies.results]\n      }));\n    } catch (error) {\n      setError(true);\n    }\n\n    setLoading(false);\n  }; //Initial Render\n\n\n  useEffect(() => {\n    fetchMovies(1);\n  }, []);\n  return {\n    state,\n    loading,\n    error\n  };\n};\n\n_s(useHomeFetch, \"KZgOLoECbee4UfZq/rbGpTsqoEw=\");","map":{"version":3,"sources":["/home/alan/projects/react-tutorial/src/hooks/useHomeFetch.js"],"names":["useState","useEffect","useRef","API","initialState","page","results","total_pages","total_results","useHomeFetch","state","setState","loading","setLoading","error","setError","fetchMovies","searchTerm","movies","prev"],"mappings":";;AAAA,SAASA,QAAT,EAAmBC,SAAnB,EAA8BC,MAA9B,QAA4C,OAA5C;AACA,OAAOC,GAAP,MAAgB,QAAhB;AAEA,MAAMC,YAAY,GAAG;AACnBC,EAAAA,IAAI,EAAE,CADa;AAEnBC,EAAAA,OAAO,EAAE,EAFU;AAGnBC,EAAAA,WAAW,EAAE,CAHM;AAInBC,EAAAA,aAAa,EAAE;AAJI,CAArB;AAOA,OAAO,MAAMC,YAAY,GAAG,MAAM;AAAA;;AAChC,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBX,QAAQ,CAACI,YAAD,CAAlC;AACA,QAAM,CAACQ,OAAD,EAAUC,UAAV,IAAwBb,QAAQ,CAAC,KAAD,CAAtC;AACA,QAAM,CAACc,KAAD,EAAQC,QAAR,IAAoBf,QAAQ,CAAC,KAAD,CAAlC;;AAEA,QAAMgB,WAAW,GAAG,OAAOX,IAAP,EAAaY,UAAU,GAAG,EAA1B,KAAiC;AACnD,QAAI;AACFF,MAAAA,QAAQ,CAAC,KAAD,CAAR;AACAF,MAAAA,UAAU,CAAC,IAAD,CAAV;AAEA,YAAMK,MAAM,GAAG,MAAMf,GAAG,CAACa,WAAJ,CAAgBC,UAAhB,EAA4BZ,IAA5B,CAArB;AAEAM,MAAAA,QAAQ,CAAEQ,IAAD,KAAW,EAClB,GAAGD,MADe;AAElBZ,QAAAA,OAAO,EACLD,IAAI,GAAG,CAAP,GAAW,CAAC,GAAGc,IAAI,CAACb,OAAT,EAAkB,GAAGY,MAAM,CAACZ,OAA5B,CAAX,GAAkD,CAAC,GAAGY,MAAM,CAACZ,OAAX;AAHlC,OAAX,CAAD,CAAR;AAKD,KAXD,CAWE,OAAOQ,KAAP,EAAc;AACdC,MAAAA,QAAQ,CAAC,IAAD,CAAR;AACD;;AACDF,IAAAA,UAAU,CAAC,KAAD,CAAV;AACD,GAhBD,CALgC,CAuBhC;;;AACAZ,EAAAA,SAAS,CAAC,MAAM;AACde,IAAAA,WAAW,CAAC,CAAD,CAAX;AACD,GAFQ,EAEN,EAFM,CAAT;AAIA,SAAO;AACLN,IAAAA,KADK;AAELE,IAAAA,OAFK;AAGLE,IAAAA;AAHK,GAAP;AAKD,CAjCM;;GAAML,Y","sourcesContent":["import { useState, useEffect, useRef } from \"react\";\nimport API from \"../API\";\n\nconst initialState = {\n  page: 0,\n  results: [],\n  total_pages: 0,\n  total_results: 0,\n};\n\nexport const useHomeFetch = () => {\n  const [state, setState] = useState(initialState);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(false);\n\n  const fetchMovies = async (page, searchTerm = \"\") => {\n    try {\n      setError(false);\n      setLoading(true);\n\n      const movies = await API.fetchMovies(searchTerm, page);\n\n      setState((prev) => ({\n        ...movies,\n        results:\n          page > 1 ? [...prev.results, ...movies.results] : [...movies.results],\n      }));\n    } catch (error) {\n      setError(true);\n    }\n    setLoading(false);\n  };\n\n  //Initial Render\n  useEffect(() => {\n    fetchMovies(1);\n  }, []);\n\n  return {\n    state,\n    loading,\n    error,\n  };\n};\n"]},"metadata":{},"sourceType":"module"}